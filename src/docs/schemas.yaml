openapi: 3.0.0
info:
  title: TRY-EXPRESS
  version: 1.0.0
  description: API for managing users (trying out express)
servers:
  - url: /v1
    description: API Version 1
tags:
  - name: Health Check
    description: API Health Status
  - name: Authentication
    description: User authentication operations
  - name: Users
    description: User management operations
paths:
  /api/v1/health:
    get:
      summary: Health Check
      tags:
        - Health Check
      operationId: healthCheck
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  uptime:
                    type: number
                    example: 123.45
  /api/v1/auth/login:
    post:
      summary: User Login
      tags:
        - Authentication
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDTO'
      responses:
        '200':
          description: Successful login, returns tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokensResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal server error
  /api/v1/users:
    get:
      summary: Get All Users
      tags:
        - Users
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: A paginated list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
    post:
      summary: Create a New User
      tags:
        - Users
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDTO'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '409':
          description: Conflict, email already used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Validation error
        '500':
          description: Internal server error
  /api/v1/users/{id}:
    get:
      summary: Get User by ID
      tags:
        - Users
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the user to retrieve
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
    put:
      summary: Update User by ID
      tags:
        - Users
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDTO'
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: Conflict, email already used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized
        '422':
          description: Validation error
        '500':
          description: Internal server error
    delete:
      summary: Delete User by ID
      tags:
        - Users
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
components:
  schemas:
    UserResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
        name:
          type: string
          description: Name of the user
        email:
          type: string
          format: email
          description: Email address of the user
        age:
          type: integer
          description: Age of the user
        createdAt:
          type: string
          format: date-time
          description: Date and time when the user was created
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the user was last updated
      required:
        - id
        - name
        - email
        - age
        - createdAt
        - updatedAt
    UserCreateDTO:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name of the user
        email:
          type: string
          format: email
          description: Email address of the user
        age:
          type: integer
          minimum: 0
          description: Age of the user
        password:
          type: string
          minLength: 6
          description: User's password
      required:
        - name
        - email
        - age
        - password
    UserUpdateDTO:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name of the user
        email:
          type: string
          format: email
          description: Email address of the user
        age:
          type: integer
          minimum: 0
          description: Age of the user
        password:
          type: string
          minLength: 6
          description: User's password
    LoginDTO:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email for login
        password:
          type: string
          minLength: 6
          description: User's password for login
      required:
        - email
        - password
    ApiResponse:
      type: object
      properties:
        data:
          type: object # Can be any type, depending on the specific response
          description: The actual data returned by the API
    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
          description: Array of items for the current page
        page:
          type: integer
          minimum: 1
          description: Current page number
        limit:
          type: integer
          minimum: 1
          description: Number of items per page
        total:
          type: integer
          description: Total number of items across all pages
      required:
        - data
        - page
        - limit
        - total
    PaginatedUserResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/UserResponseDTO'
    UserResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/UserResponseDTO'
    CreateUserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID of the newly created user
      required:
        - id
    AuthTokensResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
        expiresIn:
          type: string
          description: Expiration time of the access token
        refreshToken:
          type: string
          description: JWT refresh token
      required:
        - token
        - expiresIn
        - refreshToken
    ApiError:
      type: object
      properties:
        type:
          type: string
          description: Type of error (e.g., conflict, notFound)
        message:
          type: string
          description: A human-readable error message
        params:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Optional parameters related to the error
      required:
        - type
        - message
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT